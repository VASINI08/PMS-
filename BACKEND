# PMS-import sqlite3
from datetime import datetime

# --- DATABASE SETUP ---
def get_db_connection():
    """Establishes a connection to the SQLite database."""
    conn = sqlite3.connect('performance.db')
    conn.row_factory = sqlite3.Row  # This allows accessing columns by name
    return conn

def create_tables():
    """Creates the necessary tables for the performance management system."""
    conn = get_db_connection()
    with conn:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS goals (
                goal_id INTEGER PRIMARY KEY AUTOINCREMENT,
                employee_id INTEGER NOT NULL,
                manager_id INTEGER NOT NULL,
                description TEXT NOT NULL,
                due_date DATE NOT NULL,
                status TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        ''')
        conn.execute('''
            CREATE TABLE IF NOT EXISTS tasks (
                task_id INTEGER PRIMARY KEY AUTOINCREMENT,
                goal_id INTEGER NOT NULL,
                description TEXT NOT NULL,
                status TEXT NOT NULL, -- 'Pending', 'Approved', 'Rejected', 'Completed'
                FOREIGN KEY (goal_id) REFERENCES goals (goal_id)
            );
        ''')
        conn.execute('''
            CREATE TABLE IF NOT EXISTS feedback (
                feedback_id INTEGER PRIMARY KEY AUTOINCREMENT,
                goal_id INTEGER NOT NULL,
                manager_id INTEGER NOT NULL,
                employee_id INTEGER NOT NULL,
                content TEXT NOT NULL,
                given_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (goal_id) REFERENCES goals (goal_id)
            );
        ''')
    conn.close()

# --- CRUD Functions for Goals ---
def create_goal(employee_id, manager_id, description, due_date):
    """Adds a new goal to the database with a 'Draft' status."""
    conn = get_db_connection()
    with conn:
        conn.execute("INSERT INTO goals (employee_id, manager_id, description, due_date, status) VALUES (?, ?, ?, ?, ?)",
                     (employee_id, manager_id, description, due_date, 'Draft'))
    conn.close()

def get_goals(employee_id=None, manager_id=None):
    """Fetches goals based on employee or manager ID."""
    conn = get_db_connection()
    query = "SELECT * FROM goals"
    params = []
    if employee_id:
        query += " WHERE employee_id = ?"
        params.append(employee_id)
    if manager_id:
        query += " WHERE manager_id = ?"
        params.append(manager_id)
    goals = conn.execute(query, params).fetchall()
    conn.close()
    return goals

def update_goal_status(goal_id, new_status):
    """Updates the status of a specific goal."""
    conn = get_db_connection()
    with conn:
        conn.execute("UPDATE goals SET status = ? WHERE goal_id = ?", (new_status, goal_id))
    conn.close()

# --- CRUD Functions for Tasks ---
def create_task(goal_id, description):
    """Adds a new task for a goal with a 'Pending' status."""
    conn = get_db_connection()
    with conn:
        conn.execute("INSERT INTO tasks (goal_id, description, status) VALUES (?, ?, ?)",
                     (goal_id, description, 'Pending'))
    conn.close()

def get_tasks_for_goal(goal_id):
    """Fetches all tasks for a specific goal."""
    conn = get_db_connection()
    tasks = conn.execute("SELECT * FROM tasks WHERE goal_id = ?", (goal_id,)).fetchall()
    conn.close()
    return tasks

def update_task_status(task_id, new_status):
    """Updates the status of a specific task."""
    conn = get_db_connection()
    with conn:
        conn.execute("UPDATE tasks SET status = ? WHERE task_id = ?", (task_id, new_status))
    conn.close()

# --- CRUD Functions for Feedback ---
def create_feedback(goal_id, manager_id, employee_id, content):
    """Adds new feedback for a goal."""
    conn = get_db_connection()
    with conn:
        conn.execute("INSERT INTO feedback (goal_id, manager_id, employee_id, content) VALUES (?, ?, ?, ?)",
                     (goal_id, manager_id, employee_id, content))
    conn.close()

def get_feedback_for_goal(goal_id):
    """Fetches feedback for a specific goal."""
    conn = get_db_connection()
    feedback = conn.execute("SELECT * FROM feedback WHERE goal_id = ?", (goal_id,)).fetchall()
    conn.close()
    return feedback

# --- Automated Feedback (Trigger-like Functionality) ---
def check_for_automated_feedback():
    """Checks for goals that need automated feedback."""
    conn = get_db_connection()
    # Example: Check for goals with a due date in the past
    goals_to_review = conn.execute("SELECT goal_id, employee_id, manager_id, description FROM goals WHERE due_date < ? AND status != 'Completed' AND status != 'Cancelled'", (datetime.now().date(),)).fetchall()
    
    for goal in goals_to_review:
        # Check if feedback already exists for this automated trigger
        existing_feedback = conn.execute("SELECT * FROM feedback WHERE goal_id = ? AND content LIKE 'Automated reminder%'", (goal['goal_id'],)).fetchone()
        
        if not existing_feedback:
            automated_message = f"Automated reminder: This goal '{goal['description']}' is past its due date."
            create_feedback(goal['goal_id'], goal['manager_id'], goal['employee_id'], automated_message)
            print(f"Automated feedback created for goal {goal['goal_id']}")
    conn.close()

if __name__ == '__main__':
    create_tables()
    # You can call check_for_automated_feedback() from a scheduler or a button click in the frontend.
